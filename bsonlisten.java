/*
Copyright (C) 2022 Paul "Buzz" Moschetti
    
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

package com.foo.web3.apps;

import com.foo.web3.providers.HttpFix;
import com.foo.web3.providers.Provider;

import com.foo.web3.generated.MyContract;


import java.util.Map;
import java.util.List;
import java.util.Arrays;
import java.math.BigDecimal;
import java.math.BigInteger;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.web3j.protocol.Web3j; // The main puppy

import org.web3j.crypto.Credentials;
import org.web3j.crypto.WalletUtils;

import org.web3j.protocol.core.methods.response.EthBlock;
import org.web3j.protocol.core.methods.response.EthTransaction;
import org.web3j.protocol.core.methods.response.Transaction;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.core.methods.response.EthGetTransactionReceipt;

import org.web3j.protocol.http.HttpService;
import org.web3j.tx.Contract;
import org.web3j.tx.ManagedTransaction;
import org.web3j.tx.Transfer;
import org.web3j.utils.Convert;
import org.web3j.utils.Numeric;



import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple7;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.bson.*;


import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.DefaultBlockParameterName;
import org.web3j.protocol.core.DefaultBlockParameterNumber;
import org.web3j.abi.EventEncoder;

public class bsonlisten {

    private static final Logger log = LoggerFactory.getLogger(bsonlisten.class);


    public static void main(String[] args) throws Exception {
        new bsonlisten().run(args);
    }


    private void run(String[] args) throws Exception {

	String contractAddr = args[0];

	Provider pp = ProviderFactory.create(); // default!

	HttpFix hf = pp.vendHttpFix();
	Web3j web3j = hf.getweb3j();
	log.info("Connected to Ethereum client version: "
		 + web3j.web3ClientVersion().send().getWeb3ClientVersion());
	Credentials credentials = pp.vendCredentials();
        log.info("Credentials loaded");

	MyContract ct2 = MyContract.load(contractAddr, web3j, credentials,
					 pp.vendGasPrice(), Contract.GAS_LIMIT);

	System.out.println("Contract loaded; setting up for events...");

	setupWatch(web3j, ct2, contractAddr);

	// Stay alive loop.
	while(true) {
	    try{ Thread.currentThread().sleep(2000); } // 2 seconds is really long 
	    catch(InterruptedException ie){ } // keep going
	}

	// hf.shutdown(); // NOT REACHED
    }

    private class Callback {
	public String txid;
	public BigInteger gasUsed;

	public void onReceipt() {
	}
    }

    private void setupWatch(Web3j web3j, MyContract ct2, String contractAddr) {
	DefaultBlockParameterNumber sblock = new DefaultBlockParameterNumber(22L);
	final EthFilter ethFilter = new EthFilter(DefaultBlockParameterName.EARLIEST, DefaultBlockParameterName.LATEST, ct2.getContractAddress());
	//final EthFilter ethFilter = new EthFilter(sblock, DefaultBlockParameterName.LATEST, ct2.getContractAddress());
	ethFilter.addSingleTopic(EventEncoder.encode(ct2.MODIFIED_EVENT));
	//ethFilter.addOptionalTopics("0x" + TypeEncoder.encode(new Address("0x00a329c0648769a73afac7f9381e08fb43dbea72")));

	int qq = 34;

	System.out.println("Collect events...");
	ct2.modifiedEventFlowable(ethFilter).subscribe(event -> {   
		// event is type class ModifiedEventResponse extends BaseEventReponse

		System.out.println("\n**filter triggered; log data:");

		// contract YES
		System.out.println("  getAddress(): " + event.log.getAddress()); // java.lang.String

		System.out.println("  getBlockHash(): " + event.log.getBlockHash() ); // java.lang.String

		// block YES
		System.out.println("  getBlockNumber(): " + event.log.getBlockNumber() ); // java.lang.BigInteger
		System.out.println("  getBlockNumber().long: " + event.log.getBlockNumber().longValue() );
		System.out.println("  getBlockNumberRaw(): " + event.log.getBlockNumberRaw() ); // java.lang.String

		// Maybe...
		//System.out.println("  getData(): " + event.log.getData() ); // java.lang.String
		System.out.println("  getLogIndex(): " + event.log.getLogIndex() ); // java.lang.BigInteger
		System.out.println("  getLogIndexRaw(): " + event.log.getLogIndexRaw()); // java.lang.String
		//java.util.List<java.lang.String> getTopics() 

		//  YES!  This is TXID
		System.out.println("  getTransactionHash(): " + event.log.getTransactionHash() ); // java.lang.String


		System.out.println("  getTransactionIndex(): " + event.log.getTransactionIndex() ); // java.math.BigInteger
		System.out.println("  getTransactionIndexRaw(): " + event.log.getTransactionIndexRaw() ); // java.lang.String
		System.out.println("  getType(): " + event.log.getType() ); // java.lang.String


		Document info = Utils.fromBytes(event.myInfo, Document.class);
	
		System.out.println("INFO");
		Utils.walkMap(info, 0);


		String txhash = event.log.getTransactionHash();

		DefaultBlockParameterNumber ourBlock = new DefaultBlockParameterNumber(event.log.getBlockNumber());
		/*
		  List<EthBlock.TransactionResult> txs = web3j.ethGetBlockByNumber(ourBlock, true).send().getBlock().getTransactions();
		  txs.forEach(tx -> {
		  EthBlock.TransactionObject transaction = (EthBlock.TransactionObject) tx.get();
		  //System.out.println(transaction.getFrom());
		  System.out.println("BTX: " + transaction);
		  });
		*/

		// org.web3j.protocol.core.methods.response.EthGetTransactionReceipt
		//Optional<TransactionReceipt> rcp = web3j.ethGetTransactionReceipt(event.log.getTransactionHash()).send().getTransactionReceipt();
		EthTransaction ethTransaction = web3j.ethGetTransactionByHash(txhash).send();
		//System.out.println("TX from log\n" + ethTransaction);
		java.util.Optional<Transaction> aatx = ethTransaction.getTransaction();

		Transaction ttx = aatx.get();
		System.out.println("gas stuff TX");
		System.out.println("  getGas(): " + ttx.getGas() ); // java.math.BigInteger
		System.out.println("  getGasPrice(): " + ttx.getGasPrice() ); // java.math.BigInteger
		System.out.println("  getGasPriceRaw(): " + ttx.getGasPriceRaw() ); // java.lang.String
		System.out.println("  getGasRaw(): " + ttx.getGasRaw() ); // java.lang.String

		EthGetTransactionReceipt etxr = web3j.ethGetTransactionReceipt(txhash).send();
		//assertTrue(ethGetTransactionReceipt.getTransactionReceipt().isPresent());
		TransactionReceipt TXr = etxr.getTransactionReceipt().get();
		//System.out.println("TXreceipt: " + TXr.toString());
		System.out.println("  TXr status:   " + TXr.getStatus());
		System.out.println("  TXr root:     " + TXr.getRoot());
		System.out.println("  TXr TXhash:   " + TXr.getTransactionHash());
		System.out.println("  TXr blk hash: " + TXr.getBlockHash());
		System.out.println("  TXr blk num:  " + TXr.getBlockNumber());
		System.out.println("  TXr gas used: " + TXr.getGasUsed());
		System.out.println("  TXr from:     " + TXr.getFrom());
		System.out.println("  TXr to:       " + TXr.getTo());
		
        });

    }

}
